using System;
using System.Drawing;
using System.IO;

namespace ElFinder
{
    /// <summary>
    /// Represents a root of file system
    /// </summary>
    public class Root
    {
        #region public

            /// <summary>
            /// Initialize new instanse of class <see cref="ElFinder.Root"/>
            /// </summary>
            /// <param name="directory">Directory which will be root</param>
            /// <param name="url">Url to root</param>
            public Root(DirectoryInfo directory, string url)
            {
                if (directory == null)
                    throw new ArgumentNullException("directory", "Root directory can not be null");
                if (!directory.Exists)
                    throw new ArgumentException("Root directory must exist", "directory");
                _alias = directory.Name;
                _directory = directory;
                _url = url;
                _uploadOverwrite = true;
                _thumbnailsSize = 48;  
            }

            /// <summary>
            /// Initialize new instanse of class <see cref="ElFinder.Root"/>
            /// </summary>
            /// <param name="directory">Directory which will be root</param>
            public Root(DirectoryInfo directory) : this(directory, null) { }

            /// <summary>
            /// Gets a autogenerated prefix of root
            /// </summary>
            public string VolumeId
            {
                get { return _volumeId; }
                internal set { _volumeId = value; }
            }

            /// <summary>
            /// Get or sets alias for root. If not set will use directory name of path
            /// </summary>
            public string Alias
            {
                get { return _alias; }
                set { _alias = value; }
            }

            /// <summary>
            /// Get or sets a directory which is root 
            /// </summary>
            public DirectoryInfo Directory
            {
                get { return _directory; }
                set
                {
                    if (value == null)
                        throw new ArgumentNullException("Root directory can not be null", "value");
                    if (!value.Exists)
                        throw new ArgumentException("Directory must exist", "directory");
                    _directory = value;
                }
            }

            /// <summary>
            /// Get or sets url that points to path directory (also called 'root URL'). 
            /// </summary>
            public string Url { get; set; }

            /// <summary>
            /// Get or sets if root for read only (users can't change file)
            /// </summary>
            public bool IsReadOnly { get; set; }

            /// <summary>
            /// Get or sets if user can only show files (and cannot download).
            /// Note: if you set url property, than users can access to directory by the provided url
            /// </summary>
            public bool IsShowOnly { get; set; }

            /// <summary>
            /// Get or sets if root is locked (user can't remove, rename or delete files or subdirectories)  
            /// </summary>
            public bool IsLocked { get; set; }

            /// <summary>
            /// Get or sets a subfolder of root diretory, which will be start 
            /// </summary>
            public DirectoryInfo StartPath
            {
                get { return _startPath; }
                set
                {
                    if (value != null && !value.Exists)
                        throw new ArgumentException("Start directory must exist or can be null", "value");
                    _startPath = value;
                }
            }       

            /// <summary>
            /// Get or sets maximum upload file size. This size is per files in bytes. 
            /// Note: you still to configure maxupload limits in web.config for whole application
            /// </summary>
            public int? MaxUploadSize
            {
                get { return _maxUploadSize; }
                set
                {
                    if (value.HasValue && value.Value < 0)
                        throw new ArgumentException("Max upload size can not be less than zero", "value");
                    _maxUploadSize = value; }
            }

            /// <summary>
            /// Get or sets maximum upload file size. This size is per files in kb. 
            /// Note: you still to configure maxupload limits in web.config for whole application
            /// </summary>
            public double? MaxUploadSizeInKb
            {
                get { return _maxUploadSize.HasValue ? (double?)(_maxUploadSize.Value / 1024.0) : null; }
                set
                {
                    MaxUploadSize = value.HasValue ? (int?)(value * 1024) : null;
                }
            }

            /// <summary>
            /// Get or sets maximum upload file size. This size is per files in Mb. 
            /// Note: you still to configure maxupload limits in web.config for whole application
            /// </summary>
            public double? MaxUploadSizeInMb
            {
                get { return MaxUploadSizeInKb.HasValue ? (double?)(MaxUploadSizeInKb.Value / 1024.0) : null; }
                set
                {
                    MaxUploadSizeInKb = value.HasValue ? (int?)(value * 1024) : null;
                }
            }

            /// <summary>
            /// Get or sets if files on upload will replace or give them new names. true - replace old files, false give new names like original_name-number.ext
            /// </summary>
            public bool UploadOverwrite
            {
                get { return _uploadOverwrite; }
                set { _uploadOverwrite = value; }
            }

            /// <summary>
            /// Get or sets thumbnails size
            /// </summary>
            public int ThumbnailsSize
            {
                get { return _thumbnailsSize; }
                set
                {
                    if (value <= 0)
                        throw new ArgumentException("Size can not be less or equals zero");
                    _thumbnailsSize = value;
                }
            }

            /// <summary>
            /// Get ot sets thumbnals url
            /// </summary>
            public string ThumbnailsUrl
            {
                get { return _thumbnailsUrl; }
                set
                {
                    if (string.IsNullOrEmpty(value))
                        throw new ArgumentNullException("Url can not be null or empty");
                    _thumbnailsUrl = value;
                }
            }

            /// <summary>
            /// Get or sets directory for store all thumbnails.
            /// </summary>
            public DirectoryInfo ThumbnailsStorage
            {
                get { return _thumbnailsStorage; }
                set
                {
                    if (value != null)
                    {
                        if (!value.Exists)
                            throw new ArgumentException("Thumbnails storage directory must exist");
                        _thumbnailsDirectory = new DirectoryInfo(Path.Combine(value.FullName, ".tmb_" + _directory.Name));
                        if (!_thumbnailsDirectory.Exists)
                        {
                            _thumbnailsDirectory = System.IO.Directory.CreateDirectory(_thumbnailsDirectory.FullName);
                            _thumbnailsDirectory.Attributes |= FileAttributes.Hidden;
                        }
                    }
                    else
                    {
                        _thumbnailsDirectory = value;
                    }
                    _thumbnailsStorage = value;
                }
            }

            /// <summary>
            /// Get or sets pictures editor. The object responsible for generating thumnails and .
            /// </summary>
            public IPicturesEditor PicturesEditor
            {
                get
                {
                    if (_picturesEditor == null)
                        _picturesEditor = new DefaultPicturesEditor();
                    return _picturesEditor;
                }
                set
                {
                    if (value == null)
                        throw new ArgumentNullException("value");
                    _picturesEditor = value;
                }
            }               

        #endregion


        #region private
            internal Size GetImageDimension(FileInfo input)
            {
                if (!input.Exists)
                    throw new ArgumentException("File not exist");
                Image image = Image.FromFile(input.FullName);
                return new Size(image.Width, image.Height);
            }

            internal bool CanCreateThumbnail(FileInfo input)
            {
                return ThumbnailsUrl != null && PicturesEditor.CanProcessFile(input.Extension);
            }
            
            internal string GetThumbnailPath(string relativePath)
            {
                //FileInfo thumb = new FileInfo(Path.Combine(_directory.FullName, relativePath));
                //if (thumb.Exists)
                //    return thumb.FullName;
                return null;
            }

            internal string GetThumbnailHash(string originalHash)
            {
                string path = Helper.DecodePath(originalHash.Substring(VolumeId.Length));
                return originalHash + PicturesEditor.ConvertThumbnailExtension(Path.GetExtension(path));
            }

            internal Thumbnail GenerateThumbnail(FullPath input)
            {
                string path = input.File.FullName;
                if (_thumbnailsDirectory != null)
                {
                    FileInfo thumbPath;
                    if (input.File.FullName.StartsWith(_thumbnailsDirectory.FullName))
                        thumbPath = input.File;
                    else
                        thumbPath = new FileInfo(Path.Combine(_thumbnailsDirectory.FullName, input.RelativePath));
                    if (!thumbPath.Exists)
                    {
                        if (!thumbPath.Directory.Exists)
                        {
                            System.IO.Directory.CreateDirectory(thumbPath.Directory.FullName);
                        }
                        using (FileStream stream = thumbPath.Create())
                        {
                            Thumbnail thumb = PicturesEditor.GetThumbnail(File.OpenRead(path), _thumbnailsSize, true);
                            thumb.ImageStream.CopyTo(stream);
                            thumb.ImageStream.Position = 0;
                            return thumb;
                        }
                    }
                    else
                    {
                        return new Thumbnail(PicturesEditor.ConvertThumbnailExtension(thumbPath.Extension), thumbPath.OpenRead());
                    }
                }
                else
                {
                    return PicturesEditor.GetThumbnail(File.OpenRead(path), _thumbnailsSize, true);
                }
            }  

            private string _volumeId;
            private string _alias;
            private DirectoryInfo _directory;
            private DirectoryInfo _startPath;
            private int? _maxUploadSize;
            private bool _uploadOverwrite;
            private string _url;

            private string _thumbnailsUrl;
            private int _thumbnailsSize;
            private DirectoryInfo _thumbnailsDirectory;
            private DirectoryInfo _thumbnailsStorage;
            private IPicturesEditor _picturesEditor;
        #endregion
    }
}